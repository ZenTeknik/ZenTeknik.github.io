<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Haris Shahzad</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Haris Shahzad</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Mon, 03 Feb 2025 17:06:00 +0500</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Understanding HTTP/1.1, HTTP/2, and HTTP/3</title>
      <link>http://localhost:1313/posts/http/</link>
      <pubDate>Mon, 03 Feb 2025 17:06:00 +0500</pubDate>
      <guid>http://localhost:1313/posts/http/</guid>
      <description>&lt;h1 id=&#34;understanding-http11-http2-and-http3-a-comprehensive-comparison&#34;&gt;Understanding HTTP/1.1, HTTP/2, and HTTP/3: A Comprehensive Comparison&lt;/h1&gt;&#xA;&lt;p&gt;Web protocols have evolved significantly over the years, and the three most commonly used versions today are HTTP/1.1, HTTP/2, and HTTP/3. These protocols govern how data is transmitted over the web, and each version brings improvements to speed, security, and reliability.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://localhost:1313/HTTPimages/HTTP1-image.png#center&#34; alt=&#34;HTTP&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;http11-the-classic-protocol&#34;&gt;HTTP/1.1: The Classic Protocol&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Transport Protocol:&lt;/strong&gt; TCP (Transmission Control Protocol)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;key-features&#34;&gt;Key Features:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Persistent Connections:&lt;/strong&gt; HTTP/1.1 introduced persistent connections, allowing multiple requests to be sent over a single TCP connection. However, it still opens new connections for each request-response pair.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Pipelining:&lt;/strong&gt; Multiple requests can be sent before receiving responses, but the responses must be processed in the order they were sent.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Text-Based:&lt;/strong&gt; HTTP/1.1 uses a text-based format, which is human-readable but less efficient for machine parsing.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Head-of-Line Blocking:&lt;/strong&gt; HTTP/1.1 suffers from head-of-line blocking, where one delayed or lost packet can block the entire stream of requests.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;testing-http11-on-github-arch-based-linux&#34;&gt;Testing HTTP/1.1 on GitHub (Arch-based Linux)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Results:&lt;/strong&gt; Here are the testing results for HTTP/1.1.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;http2-major-improvements&#34;&gt;HTTP/2: Major Improvements&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Transport Protocol:&lt;/strong&gt; TCP (Transmission Control Protocol)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;key-features-1&#34;&gt;Key Features:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Multiplexing:&lt;/strong&gt; Multiple requests and responses can be sent over a single connection, reducing latency and eliminating head-of-line blocking.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Header Compression:&lt;/strong&gt; HTTP/2 uses HPACK for header compression, reducing overhead and speeding up data transfer.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Stream Prioritization:&lt;/strong&gt; Allows clients to specify the priority of streams (requests) so that more important resources can be sent first.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Server Push:&lt;/strong&gt; Servers can proactively send resources to the client before they are requested, improving performance for critical resources.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Binary Protocol:&lt;/strong&gt; HTTP/2 is binary rather than text-based, which makes it more efficient for parsing and reduces errors.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;testing-http2-on-github-arch-based-linux&#34;&gt;Testing HTTP/2 on GitHub (Arch-based Linux)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Results:&lt;/strong&gt; Here are the testing results for HTTP/2.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;http3-the-new-standard&#34;&gt;HTTP/3: The New Standard&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Transport Protocol:&lt;/strong&gt; QUIC (Quick UDP Internet Connections), based on UDP (User Datagram Protocol)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;key-features-2&#34;&gt;Key Features:&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Reduced Latency:&lt;/strong&gt; QUIC reduces connection setup time and allows faster data transfer, especially in mobile and high-latency networks.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Multiplexing with No Head-of-Line Blocking:&lt;/strong&gt; Unlike TCP, UDP (used in QUIC) doesnâ€™t block the entire connection when a packet is lost. This significantly improves performance, especially in real-time applications like video streaming and gaming.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Built-in Encryption:&lt;/strong&gt; HTTP/3 integrates TLS (Transport Layer Security) directly into the protocol, enhancing security without additional handshake delays.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Connection Migration:&lt;/strong&gt; QUIC allows connections to migrate between networks (e.g., from Wi-Fi to cellular) without interrupting the connection, providing a smoother user experience on mobile devices.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;testing-http3-on-github-arch-based-linux&#34;&gt;Testing HTTP/3 on GitHub (Arch-based Linux)&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Results:&lt;/strong&gt; Here are the testing results for HTTP/3.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;practical-comparison&#34;&gt;Practical Comparison&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP/1.1:&lt;/strong&gt; Although HTTP/1.1 is still widely used, it is becoming outdated due to its inefficiency in handling modern web traffic. The protocol suffers from significant delays, especially with multiple resources being requested.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP/2:&lt;/strong&gt; HTTP/2 improves web performance significantly, especially for websites with many resources (images, scripts, etc.). Its multiplexing and header compression reduce latency, and it is more widely supported than HTTP/3. However, it still relies on TCP, which can be less efficient in some high-latency scenarios.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;HTTP/3:&lt;/strong&gt; HTTP/3 is the future of web protocols, offering the lowest latency and best performance, especially for mobile users and in environments with high packet loss. However, it is still in the process of adoption and requires both server and client support. As seen in the case of GitHub, the transition to HTTP/3 is ongoing, and it may take time before it becomes the default for many services.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Do check the screenshots for HTTP/2 and HTTP/3. While I tested HTTP/3, it does not support it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo Setup Guide</title>
      <link>http://localhost:1313/posts/hugo_guide/</link>
      <pubDate>Tue, 22 Oct 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hugo_guide/</guid>
      <description>&lt;h1 id=&#34;hugo-setup-guide&#34;&gt;Hugo Setup Guide&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This guide is created based on a generic Linux environment. If you&amp;rsquo;re using Manjaro Linux or any other distribution, you might need to adjust the commands accordingly.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;what-is-hugo&#34;&gt;What is Hugo?&lt;/h2&gt;&#xA;&lt;p&gt;Hugo is a fast and flexible static site generator written in Go. It helps in building websites quickly by using simple content files and templates.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;why-use-hugo&#34;&gt;Why Use Hugo?&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Speed:&lt;/strong&gt; One of the fastest static site generators.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Flexibility:&lt;/strong&gt; Supports various content types and templates.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Ease of Use:&lt;/strong&gt; Simple setup and easy to maintain.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;&#xA;&lt;p&gt;Before setting up Hugo, ensure you have the following:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
